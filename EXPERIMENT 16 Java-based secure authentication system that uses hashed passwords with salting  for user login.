import java.security.MessageDigest; 
import java.security.NoSuchAlgorithmException; 
import java.util.Base64; 
 
public class PasswordHasher { 
private static final SecureRandom RANDOM = new SecureRandom(); 
 
public static String generateSalt() { 
byte[] salt = new byte[16]; 
RANDOM.nextBytes(salt); 
return Base64.getEncoder().encodeToString(salt); 
} 
 
public static String hashPassword(String password, String salt) throws 
NoSuchAlgorithmException { 
MessageDigest md = MessageDigest.getInstance("SHA-256"); 
md.update(salt.getBytes()); 
byte[] hashedPassword = md.digest(password.getBytes()); 
return Base64.getEncoder().encodeToString(hashedPassword); 
} 
} 
 
Step 3: Implement User Authentication 
 
1. Create a Java class (UserAuthentication.java) to register and authenticate users: 
import java.util.HashMap; 
 
public class UserAuthentication { 
private static HashMap<String, String[]> userDatabase = new 
HashMap<>(); 
public static void registerUser(String username, String password) 
throws Exception { 
String salt = PasswordHasher.generateSalt(); 
String hashedPassword = PasswordHasher.hashPassword(password, 
salt); 
userDatabase.put(username, new String[]{hashedPassword, salt}); 
System.out.println("User registered successfully!"); 
} 
public static boolean authenticateUser(String username, String 
password) throws Exception { 
if (userDatabase.containsKey(username)) { 
String[] storedData = userDatabase.get(username); 
String hashedPassword = PasswordHasher.hashPassword(password, 
storedData[1]); 
return storedData[0].equals(hashedPassword); 
} 
return false; 
} 
 
public static void main(String[] args) throws Exception { 
registerUser("user1", "securePassword"); 
boolean isAuthenticated = authenticateUser("user1", 
"securePassword"); 
System.out.println("Authentication success: " + isAuthenticated); 
} 
} 
