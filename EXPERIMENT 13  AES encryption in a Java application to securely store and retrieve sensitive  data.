AESEncryption.java
import javax.crypto.Cipher; 
import javax.crypto.KeyGenerator; 
import javax.crypto.SecretKey; 
import javax.crypto.spec.SecretKeySpec; 
import java.util.Base64; 
 
public class AESEncryption { 
    private static final String AES_ALGORITHM = "AES"; 
 
    // Generate AES Secret Key 
    public static SecretKey generateKey() throws Exception { 
        KeyGenerator keyGenerator = 
KeyGenerator.getInstance(AES_ALGORITHM); 
        keyGenerator.init(128); // AES key size 
        return keyGenerator.generateKey(); 
    } 
 
    // Encrypt data using AES 
    public static String encrypt(String data, SecretKey key) throws 
Exception { 
        Cipher cipher = Cipher.getInstance(AES_ALGORITHM); 
        cipher.init(Cipher.ENCRYPT_MODE, key); 
        byte[] encryptedBytes = cipher.doFinal(data.getBytes()); 
        return Base64.getEncoder().encodeToString(encryptedBytes); 
    } 
 
    // Decrypt data using AES 
    public static String decrypt(String encryptedData, SecretKey key) 
throws Exception { 
        Cipher cipher = Cipher.getInstance(AES_ALGORITHM);
      cipher.init(Cipher.DECRYPT_MODE, key); 
        byte[] decryptedBytes = 
cipher.doFinal(Base64.getDecoder().decode(encryptedData)); 
        return new String(decryptedBytes); 
    } 
 
    public static void main(String[] args) throws Exception { 
        SecretKey key = generateKey(); 
        String originalData = "SensitiveData123"; 
         
        String encryptedData = encrypt(originalData, key); 
        System.out.println("Encrypted Data: " + encryptedData); 
         
        String decryptedData = decrypt(encryptedData, key); 
        System.out.println("Decrypted Data: " + decryptedData); 
    } 
} 
